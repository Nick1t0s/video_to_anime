# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∫–∞–¥—Ä–æ–≤
import os
import cv2
import subprocess
from pathlib import Path
import argparse


class VideoAssembler:
    def __init__(self):
        self.supported_video_formats = {'.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm'}
        self.supported_image_formats = {'.jpg', '.jpeg', '.png', '.bmp'}

    def get_video_info(self, video_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
        cap = cv2.VideoCapture(str(video_path))
        if not cap.isOpened():
            return None

        fps = cap.get(cv2.CAP_PROP_FPS)
        frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        duration = frame_count / fps

        cap.release()

        return {
            'fps': fps,
            'frame_count': frame_count,
            'width': width,
            'height': height,
            'duration': duration
        }

    def extract_audio(self, video_path, audio_output):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ"""
        try:
            cmd = [
                'ffmpeg', '-i', str(video_path),
                '-q:a', '0', '-map', 'a',
                str(audio_output), '-y'
            ]
            subprocess.run(cmd, check=True, capture_output=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return False
        except FileNotFoundError:
            print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH")
            return False

    def find_frames(self, frames_dir):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–∞–¥—Ä—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        frames_dir = Path(frames_dir)
        frames = []

        for ext in self.supported_image_formats:
            frames.extend(frames_dir.glob(f"*{ext}"))
            # frames.extend(frames_dir.glob(f"*{ext.upper()}"))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        frames = sorted(frames, key=lambda x: x.name)
        return frames

    def create_video_from_frames(self, frames, output_path, fps, width, height):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –∫–∞–¥—Ä–æ–≤"""
        if not frames:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞–¥—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ")
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–µ–∫ (H.264 –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(str(output_path), fourcc, fps, (width, height))

        print(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {len(frames)} –∫–∞–¥—Ä–æ–≤, {fps} FPS, {width}x{height}")

        for i, frame_path in enumerate(frames, 1):
            if i % 100 == 0:
                print(f"üìπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {i}/{len(frames)}")

            frame = cv2.imread(str(frame_path))
            if frame is None:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–¥—Ä: {frame_path}")
                continue

            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if frame.shape[1] != width or frame.shape[0] != height:
                frame = cv2.resize(frame, (width, height))

            out.write(frame)

        out.release()
        return True

    def combine_video_audio(self, video_path, audio_path, output_path):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ"""
        try:
            cmd = [
                'ffmpeg', '-i', str(video_path),
                '-i', str(audio_path),
                '-c:v', 'copy',  # –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                '-c:a', 'aac',  # –ö–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ AAC
                '-shortest',  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Å–∞–º–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π –¥–æ—Ä–æ–∂–∫–∏
                str(output_path), '-y'
            ]
            subprocess.run(cmd, check=True, capture_output=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ: {e}")
            return False

    def assemble_video(self, original_video, frames_dir, output_video):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ"""
        print("üé¨ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
        if not Path(original_video).exists():
            print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {original_video}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = self.get_video_info(original_video)
        if not video_info:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {original_video}")
            return False

        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ:")
        print(f"   FPS: {video_info['fps']}")
        print(f"   –ö–∞–¥—Ä–æ–≤: {video_info['frame_count']}")
        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {video_info['width']}x{video_info['height']}")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_info['duration']:.2f} —Å–µ–∫")

        # –ù–∞—Ö–æ–¥–∏–º –∫–∞–¥—Ä—ã
        frames = self.find_frames(frames_dir)
        if not frames:
            print(f"‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {frames_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞–¥—Ä—ã")
            return False

        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: {len(frames)}")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_dir = Path("temp_video_files")
        temp_dir.mkdir(exist_ok=True)

        temp_video = temp_dir / "temp_video_no_audio.mp4"
        temp_audio = temp_dir / "temp_audio.wav"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        print("üîä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ...")
        if not self.extract_audio(original_video, temp_audio):
            return False

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –∫–∞–¥—Ä–æ–≤
        print("üéûÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∫–∞–¥—Ä–æ–≤...")
        if not self.create_video_from_frames(frames, temp_video, video_info['fps'],
                                             video_info['width'], video_info['height']):
            return False

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
        print("üîä –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ...")
        if not self.combine_video_audio(temp_video, temp_audio, output_video):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if Path(output_video).exists():
            result_info = self.get_video_info(output_video)
            if result_info:
                print(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {output_video}")
                print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result_info['duration']:.2f} —Å–µ–∫")
                print(f"   FPS: {result_info['fps']}")
                print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {result_info['width']}x{result_info['height']}")

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    temp_video.unlink()
                    temp_audio.unlink()
                    temp_dir.rmdir()
                except:
                    pass

                return True

        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ")
        return False


# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
def assemble(original_video, frames_dir, output_video):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    assembler = VideoAssembler()
    print("üé¨ –°–±–æ—Ä—â–∏–∫ –≤–∏–¥–µ–æ –∏–∑ –∫–∞–¥—Ä–æ–≤")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not Path(original_video).exists():
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {original_video}")
        print("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ")
        return False

    if not Path(frames_dir).exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∫–∞–¥—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {frames_dir}")
        print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–∞–¥—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ")
        return False

    success = assembler.assemble_video(
        original_video=original_video,
        frames_dir=frames_dir,
        output_video=output_video
    )

    if success:
        print(f"üéâ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {output_video}")
        return True
    else:
        print("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ")
        return False

